
# Loads default set of integrations. Do not remove.
default_config:

frontend:
  themes: !include_dir_merge_named themes
automation: !include_dir_merge_list automations/
script: !include_dir_merge_named scripts/
scene: !include scenes.yaml

# esto es para incluir input_datetime desde yaml
homeassistant:
  packages: !include_dir_named packages

# Storage for Bubble Card Modules
template:
  - trigger:
      - trigger: event
        event_type: bubble_card_update_modules
    sensor:
      - name: "Bubble Card Modules"
        state: "saved"
        icon: "mdi:puzzle"
        attributes:
          modules: "{{ trigger.event.data.modules }}"
          last_updated: "{{ trigger.event.data.last_updated }}"

# template de luces unknown
  - trigger:
      - platform: homeassistant
        event: start
      - platform: time_pattern
        minutes: "/2"
      - platform: event
        event_type: state_changed
    binary_sensor:
      - name: "Luces fuera de línea"
        unique_id: luces_fuera_de_linea
        state: >-
          {% set areas = ['sala_de_estar', 'baño', 'cocina', 'dormitorio'] %}
          {% set lights = areas | map('area_entities') | sum(start=[]) 
             | map('expand') | sum(start=[]) 
             | selectattr('domain','eq','light') 
             | selectattr('state','in',['unavailable','unknown']) 
             | map(attribute='entity_id') | list %}
          {{ lights | length > 0 }}
        attributes:
          cantidad: >-
            {% set areas = ['sala_de_estar', 'baño', 'cocina', 'dormitorio'] %}
            {% set lights = areas | map('area_entities') | sum(start=[]) 
               | map('expand') | sum(start=[]) 
               | selectattr('domain','eq','light') 
               | selectattr('state','in',['unavailable','unknown']) | list %}
            {{ lights | length }}
          lista: >-
            {% set areas = ['sala_de_estar', 'baño', 'cocina', 'dormitorio'] %}
            {% set lights = areas | map('area_entities') | sum(start=[]) 
               | map('expand') | sum(start=[]) 
               | selectattr('domain','eq','light') 
               | selectattr('state','in',['unavailable','unknown']) 
               | map(attribute='entity_id') | list %}
            {{ lights }}

    sensor:
      - name: "Luces fuera de línea (lista legible)"
        unique_id: luces_fuera_de_linea_lista
        state: >-
          {% set areas = ['sala_de_estar', 'baño', 'cocina', 'dormitorio'] %}
          {% set names = areas | map('area_entities') | sum(start=[]) 
             | map('expand') | sum(start=[]) 
             | selectattr('domain','eq','light') 
             | selectattr('state','in',['unavailable','unknown']) 
             | map(attribute='name') | list %}
          {{ names | join(', ') if names else 'Ninguna' }}


# luz rack
light:
  - platform: template
    lights:
      luz_rack:
        friendly_name: "Luz Rack"
        unique_id: luzrack372892

        value_template: "{{ is_state('input_boolean.ledrack', 'on') }}"
        availability_template: "{{ not is_state('remote.broadlink_sala_remote','unavailable') }}"

        # === EFFECT (todas las claves templated) ===
        effect_list_template: >-
          ['white','red','green','blue','orange','lightorange','yellow','lima',
           'teal','cyan','realblue','lightblue','violeta1','rosa','magenta','flash','smooth']

        effect_template: "{{ states('input_select.ledrackcolores') or 'white' }}"

        set_effect:
          - service: remote.send_command
            target:
              entity_id: remote.broadlink_sala_remote
            data:
              device: Ledrack
              command: "{{ effect }}"
          - service: input_select.select_option
            target:
              entity_id: input_select.ledrackcolores
            data:
              option: "{{ effect | default('white') }}"
          - service: input_boolean.turn_on
            target:
              entity_id: input_boolean.ledrack

        # Encendido / Apagado
        turn_on:
          service: script.led_rack_on
        turn_off:
          service: script.led_rack_off

# luz cama usando platform
  - platform: template
    lights:
      luz_cama:
        friendly_name: "luz cama"
        unique_id: luzcama453256
        value_template: "{{ is_state('input_boolean.led_cama_power','on') }}"
        availability_template: "{{ not is_state('remote.broadlink_rm_mini','unavailable') }}"

        turn_on:
          - service: script.led_cama_on
          - service: input_boolean.turn_on
            target: { entity_id: input_boolean.led_cama_power }
        turn_off:
          - service: script.led_cama_off
          - service: input_boolean.turn_off
            target: { entity_id: input_boolean.led_cama_power }

media_player:
  - platform: universal
    name: televisor living
    unique_id: tvliving663
    children:
      - media_player.chromecast_sala
      - media_player.sala_de_estar
    commands:
      turn_on:
        service: media_player.turn_on
        target:
          entity_id: media_player.sala_de_estar
      turn_off:
        service: media_player.turn_off
        target:
          entity_id: media_player.sala_de_estar
      volume_up:
        service: media_player.volume_up
        target:
          entity_id: media_player.sala_de_estar
      volume_down:
        service: media_player.volume_down
        target:
          entity_id: media_player.sala_de_estar
      volume_mute:
        service: media_player.volume_mute
        data:
          is_volume_muted: true
        target:
          entity_id: media_player.sala_de_estar
      select_source:
        service: media_player.select_source
        target:
          entity_id: media_player.sala_de_estar
        data:
          source: "{{ source }}"
      media_play:
        service: media_player.media_play
        target:
          entity_id: media_player.sala_de_estar
      media_pause:
        service: media_player.media_pause
        target:
          entity_id: media_player.sala_de_estar
      media_stop:
        service: media_player.media_stop
        target:
          entity_id: media_player.sala_de_estar
      volume_set:
        service: media_player.volume_set
        target:
          entity_id: media_player.chromecast_sala
        data:
          volume_level: "{{ volume_level }}"
    attributes:
      source: media_player.sala_de_estar|source
      source_list: media_player.sala_de_estar|source_list
      is_volume_muted: media_player.sala_de_estar|is_volume_muted
      volume_level: media_player.sala_de_estar|volume_level
    device_class: tv

# sensor de sys
sensor:
  - platform: time_date
    display_options:
      - 'time'
      - 'date'

# medir temperatura
command_line:
  - sensor:
      name: CPU Temp
      command: "cat /sys/class/thermal/thermal_zone0/temp"
      unit_of_measurement: "°C"
      value_template: "{{ value | multiply(0.001) | round(0) }}"


