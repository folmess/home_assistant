# ================================
#  SALA DE ESTAR — ROLLBACK ESTABLE (con helpers + sensor.parte_del_dia)
# ================================
- alias: Sala de Estar - Control Inteligente de Luces (rollback helpers)
  id: sala_control_inteligente_luces_rollback
  mode: restart

  trigger:
    - id: movimiento
      platform: state
      entity_id: binary_sensor.motion_sala
      to: "on"

    - id: sin_movimiento
      platform: state
      entity_id: binary_sensor.motion_sala
      to: "off"

    - id: timer_finalizado
      platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.apagado_sala

  condition: []

  variables:
    # Parte del día (normalizada sin tildes)
    parte: >
      {{ states('sensor.parte_del_dia') | lower
         | replace('á','a') | replace('é','e') | replace('í','i')
         | replace('ó','o') | replace('ú','u') }}
    es_madrugada: "{{ parte == 'madrugada' }}"
    es_maniana:   "{{ parte == 'manana' }}"

    # Escena de madrugada configurable (con fallback seguro)
    escena_madrugada: >-
      {% set s = states('input_text.sala_scene_madrugada') %}
      {{ s if s not in ['unknown','unavailable','',None] else 'scene.sala_de_estar_warm_night' }}

    # Scripts opcionales
    has_script_prende_1x1: "{{ states('script.luces_sala_de_estar_prendido_1by1') not in ['unknown','unavailable'] }}"
    has_fade_script: "{{ states('script.lights_fade_to_pct') not in ['unknown','unavailable'] }}"

    # Tiempos desde helpers
    total_min: >-
      {% set mapa = {
        'manana': states('input_number.sala_off_manana')|int,
        'mediodia': states('input_number.sala_off_mediodia')|int,
        'tarde': states('input_number.sala_off_tarde')|int,
        'noche': states('input_number.sala_off_noche')|int,
        'madrugada': states('input_number.sala_off_madrugada')|int
      } %}
      {{ mapa.get(parte, states('input_number.sala_off_noche')|int) }}
    preaviso_min: "{{ states('input_number.sala_preaviso') | int }}"
    total_seg: "{{ (total_min | int) * 60 }}"
    preaviso_seg: "{{ (preaviso_min | int) * 60 }}"
    espera_preaviso_s: "{{ [ (total_seg | int) - (preaviso_seg | int), 0 ] | max }}"

    # Formatos de duración
    dur_total: "00:{{ '%02d'|format(total_min | int) }}:00"
    dur_preaviso: "00:{{ '%02d'|format(preaviso_min | int) }}:00"

    # Luces del área (para snapshot y fallback)
    luces_area_sala: >-
      {{ expand(area_entities('sala de estar'))
         | selectattr('entity_id','search','^light\\.')
         | map(attribute='entity_id') | list }}

  action:
    - choose:

        # 1) ───────── Movimiento detectado ─────────
        - conditions: [{ condition: trigger, id: movimiento }]
          sequence:
            - choose:
                # 1.a) Madrugada → escena configurada
                - conditions: [{ condition: template, value_template: "{{ es_madrugada }}" }]
                  sequence:
                    - service: timer.cancel
                      target: { entity_id: [ timer.apagado_sala, timer.preaviso_sala ] }
                    - service: scene.turn_on
                      data: { entity_id: "{{ escena_madrugada }}" }
                    - service: input_boolean.turn_off
                      target: { entity_id: input_boolean.sala_snapshot_ready }

                # 1.b) Mañana (si riel está apagada) → script 1x1 si existe, si no escena
                - conditions:
                    - condition: template
                      value_template: "{{ es_maniana }}"
                    - condition: state
                      entity_id: light.riel
                      state: "off"
                  sequence:
                    - service: timer.cancel
                      target: { entity_id: [ timer.apagado_sala, timer.preaviso_sala ] }
                    - choose:
                        - conditions: "{{ has_script_prende_1x1 }}"
                          sequence:
                            - service: script.luces_sala_de_estar_prendido_1by1
                        - conditions: []
                          sequence:
                            - service: scene.turn_on
                              target: { entity_id: scene.sala_de_estar_100_daylight }
                    - service: input_boolean.turn_off
                      target: { entity_id: input_boolean.mantener_luces }

              default:
                # 1.c) Resto del día → restaurar snapshot si hay, si no escena base
                - service: timer.cancel
                  target: { entity_id: [ timer.apagado_sala, timer.preaviso_sala ] }
                - choose:
                    - conditions:
                        - condition: template
                          value_template: "{{ states('scene.sala_snapshot') != 'unknown' }}"
                      sequence:
                        - service: scene.turn_on
                          target: { entity_id: scene.sala_snapshot }
                  default:
                    - service: scene.turn_on
                      target: { entity_id: scene.sala_de_estar_100_daylight }
                - service: input_boolean.turn_off
                  target: { entity_id: input_boolean.sala_snapshot_ready }

        # 2) ───────── Sin movimiento: programa apagado con preaviso ─────────
        - conditions:
            - condition: trigger
              id: sin_movimiento
            - condition: state
              entity_id: input_boolean.mantener_luces
              state: "off"
          sequence:
            # 2.a) Arranca timer total
            - service: timer.start
              target: { entity_id: timer.apagado_sala }
              data: { duration: "{{ dur_total }}" }

            # 2.b) Espera hasta el preaviso (o movimiento)
            - wait_for_trigger:
                - platform: state
                  entity_id: binary_sensor.motion_sala
                  to: "on"
              timeout:
                seconds: "{{ espera_preaviso_s | int }}"
              continue_on_timeout: true

            - choose:
                # 2.c) Volvió movimiento → cancelar timers y restaurar snapshot si hay
                - conditions: "{{ wait.trigger is not none }}"
                  sequence:
                    - service: timer.cancel
                      target: { entity_id: [ timer.apagado_sala, timer.preaviso_sala ] }
                    - choose:
                        - conditions:
                            - condition: template
                              value_template: "{{ states('scene.sala_snapshot') != 'unknown' }}"
                          sequence:
                            - service: scene.turn_on
                              target: { entity_id: scene.sala_snapshot }

              # 2.d) No volvió → snapshot opcional, dim a 50% con fade y arrancar preaviso
              default:
                - choose:
                    - conditions: >-
                        {{ expand(luces_area_sala)
                           | selectattr('state','eq','on') | list | length > 0 }}
                      sequence:
                        - service: scene.create
                          data:
                            scene_id: sala_snapshot
                            snapshot_entities: "{{ luces_area_sala }}"
                        - service: input_boolean.turn_on
                          target: { entity_id: input_boolean.sala_snapshot_ready }

                # Dim a 50% (usa tu script si existe)
                - choose:
                    - conditions: "{{ has_fade_script }}"
                      sequence:
                        - service: script.lights_fade_to_pct
                          data:
                            area_id: "sala de estar"
                            target_pct: 50
                            duration: 2
                            steps: 12
                            min_pct: 10
                  default:
                    - repeat:
                        for_each: "{{ expand(luces_area_sala) | selectattr('state','eq','on') | map(attribute='entity_id') | list }}"
                        sequence:
                          - service: light.turn_on
                            target: { entity_id: "{{ repeat.item }}" }
                            data:
                              transition: 2
                              brightness: >-
                                {% set b = state_attr(repeat.item,'brightness')|int(255) %}
                                {% set half = (b * 0.5) | round(0) %}
                                {% set floor = 26 %}  {# ~10% #}
                                {{ [half, floor] | max }}

                # Preaviso visible
                - service: timer.start
                  target: { entity_id: timer.preaviso_sala }
                  data: { duration: "{{ dur_preaviso }}" }

                # Espera movimiento durante el preaviso
                - wait_for_trigger:
                    - platform: state
                      entity_id: binary_sensor.motion_sala
                      to: "on"
                  timeout: "{{ dur_preaviso }}"
                  continue_on_timeout: true

                - choose:
                    # Volvió → cancelar timers y restaurar snapshot si hay
                    - conditions: "{{ wait.trigger is not none }}"
                      sequence:
                        - service: timer.cancel
                          target: { entity_id: [ timer.apagado_sala, timer.preaviso_sala ] }
                        - choose:
                            - conditions:
                                - condition: template
                                  value_template: "{{ states('scene.sala_snapshot') != 'unknown' }}"
                              sequence:
                                - service: scene.turn_on
                                  target: { entity_id: scene.sala_snapshot }
                  # No volvió → apagado suave
                  default:
                    - choose:
                        - conditions: "{{ has_fade_script }}"
                          sequence:
                            - service: script.lights_fade_to_pct
                              data:
                                area_id: "sala de estar"
                                target_pct: 0
                                duration: 2
                                steps: 12
                                min_pct: 0
                            - delay: "00:00:01"
                            - service: light.turn_off
                              target: { entity_id: "{{ luces_area_sala | join(', ') }}" }
                      default:
                        - service: light.turn_off
                          target: { entity_id: "{{ luces_area_sala | join(', ') }}" }
                          data: { transition: 2 }

        # 3) ───────── Si termina el timer total: apagado suave ─────────
        - conditions: [{ condition: trigger, id: timer_finalizado }]
          sequence:
            - choose:
                - conditions: "{{ has_fade_script }}"
                  sequence:
                    - service: script.lights_fade_to_pct
                      data:
                        area_id: "sala de estar"
                        target_pct: 0
                        duration: 2
                        steps: 12
                        min_pct: 0
                    - delay: "00:00:01"
                    - service: light.turn_off
                      target: { entity_id: "{{ luces_area_sala | join(', ') }}" }
              default:
                - service: light.turn_off
                  target: { entity_id: "{{ luces_area_sala | join(', ') }}" }
                  data: { transition: 2 }
