# ===============================
# PACK: Sala de estar - Luces por movimiento (v6)
# - Debounce: 5s para "no hay movimiento"
# - Preaviso INCLUIDO en el total (total = fase1 + preaviso)
# - Snapshot al inicio y ACTUALIZADO al comenzar el preaviso
# - Dim relativo (-50% por luz) con PISO 10%
# - Movimiento en cualquier momento:
#     * con snapshot -> restaura
#     * sin snapshot -> fallback (enciende 60% el área)
# - Timers independientes: apagado_sala (total) y preaviso_sala (fase final)
# - Bypass: input_boolean.mantener_luces
# - Flag snapshot: input_boolean.sala_snapshot_ready + TTL configurable
# - Modo restart
# ===============================

homeassistant:
  customize: {}

# ------- HELPERS -------
# (Comenta si ya existen en otro archivo)
input_boolean:
  mantener_luces:
    name: Mantener luces (bypass)
    icon: mdi:hand-back-right
  sala_snapshot_ready:
    name: Sala - Snapshot listo
    icon: mdi:camera-burst

input_number:
  sala_off_manana:
    name: Sala - Apagado mañana (min)
    min: 1
    max: 45
    step: 1
    unit_of_measurement: min
    icon: mdi:white-balance-sunny
  sala_off_mediodia:
    name: Sala - Apagado mediodía (min)
    min: 1
    max: 45
    step: 1
    unit_of_measurement: min
    icon: mdi:white-balance-sunny
  sala_off_tarde:
    name: Sala - Apagado tarde (min)
    min: 1
    max: 45
    step: 1
    unit_of_measurement: min
    icon: mdi:weather-sunset
  sala_off_noche:
    name: Sala - Apagado noche (min)
    min: 1
    max: 45
    step: 1
    unit_of_measurement: min
    icon: mdi:weather-night
  sala_off_madrugada:
    name: Sala - Apagado madrugada (min)
    min: 1
    max: 40
    step: 1
    unit_of_measurement: min
    icon: mdi:weather-night
  sala_preaviso:
    name: Sala - Preaviso (min)
    min: 1
    max: 8
    step: 1
    unit_of_measurement: min
    icon: mdi:timer-sand
  sala_snapshot_ttl_min:
    name: Sala - TTL snapshot (min)
    min: 1
    max: 240
    step: 1
    icon: mdi:timer

# ------- TIMERS -------
timer:
  apagado_sala:
    name: Apagado real - Sala de estar
    restore: true
  preaviso_sala:
    name: Preaviso - Sala de estar
    restore: true

# ===============================
# AUTOMATIZACIONES
# ===============================
automation:

  # A) Principal: maneja fases y apagado
  - id: luces_sala_movimiento
    alias: Luces - Sala de estar - por movimiento (v6)
    mode: restart

    trigger:
      # Debounce: requiere 5s continuos sin movimiento
      - platform: state
        entity_id: binary_sensor.motion_sala
        from: 'on'
        to: 'off'
        for: "00:00:05"

    condition:
      - condition: state
        entity_id: input_boolean.mantener_luces
        state: 'off'

    variables:
      # ---- Parámetros del área (más fácil de portar a otras áreas) ----
      area_name: "sala de estar"
      snapshot_id: "snapshot_sala_de_estar"

      # ---- Lógica de tiempos ----
      parte_del_dia: "{{ states('sensor.parte_del_dia') | lower }}"
      parte_del_dia_norm: >
        {{ parte_del_dia
           | replace('á','a') | replace('é','e')
           | replace('í','i') | replace('ó','o') | replace('ú','u') }}

      apagado_min: >-
        {% set mapa = {
          'manana': states('input_number.sala_off_manana')|int,
          'mediodia': states('input_number.sala_off_mediodia')|int,
          'tarde': states('input_number.sala_off_tarde')|int,
          'noche': states('input_number.sala_off_noche')|int,
          'madrugada': states('input_number.sala_off_madrugada')|int
        } %}
        {{ mapa.get(parte_del_dia_norm, states('input_number.sala_off_noche')|int) }}

      preaviso_seconds: "{{ (states('input_number.sala_preaviso') | int) * 60 }}"
      apagado_seconds: "{{ (apagado_min | int) * 60 }}"
      fase1_seconds: >-
        {% set total = (apagado_min | int) * 60 %}
        {% set preav = (states('input_number.sala_preaviso') | int) * 60 %}
        {% set v = total - preav %}
        {{ v if v > 0 else 0 }}

      fase1_timeout: >-
        {% set s = fase1_seconds | int %}
        {{ '%02d:%02d:%02d' | format((s // 3600), ((s % 3600) // 60), (s % 60)) }}
      apagado_timeout: >-
        {% set s = apagado_seconds | int %}
        {{ '%02d:%02d:%02d' | format((s // 3600), ((s % 3600) // 60), (s % 60)) }}

      # ---- Luces del área ----
      luces_area: >-
        {{ expand(area_entities(area_name))
           | selectattr('entity_id','search','^light\\.')
           | map(attribute='entity_id') | list }}

      # ---- Piso de brillo (10% de 255 ≈ 26) ----
      piso_brillo: 26

    action:
      # 0) Snapshot inicial y flag (para poder restaurar en cualquier momento)
      - service: scene.create
        data:
          scene_id: "{{ snapshot_id }}"
          snapshot_entities: "{{ luces_area }}"
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.sala_snapshot_ready

      # 1) Iniciar timer TOTAL
      - service: timer.start
        target: { entity_id: timer.apagado_sala }
        data:
          duration: "{{ apagado_seconds }}"

      # 2) FASE 1: esperar movimiento hasta (total - preaviso)
      - wait_for_trigger:
          - platform: state
            entity_id: binary_sensor.motion_sala
            to: 'on'
        timeout: "{{ fase1_timeout }}"
        continue_on_timeout: true

      # 3) Movimiento en FASE 1 -> restaurar y cancelar
      - choose:
          - conditions: "{{ wait.completed }}"
            sequence:
              - condition: state
                entity_id: input_boolean.mantener_luces
                state: 'off'
              - service: scene.turn_on
                target:
                  entity_id: "scene.{{ snapshot_id }}"
                data:
                  transition: 2
              - service: timer.cancel
                target:
                  entity_id: timer.apagado_sala
              - service: input_boolean.turn_off
                target:
                  entity_id: input_boolean.sala_snapshot_ready
              - stop: "Movimiento durante FASE 1 -> restaurado snapshot y cancelado apagado."

        # 4) Sin movimiento: arrancar PREAVISO (INCLUIDO en total)
        default:
          - condition: state
            entity_id: input_boolean.mantener_luces
            state: 'off'

          # 4.a) Actualizar snapshot y flag (estado justo antes de atenuar)
          - service: scene.create
            data:
              scene_id: "{{ snapshot_id }}"
              snapshot_entities: "{{ luces_area }}"
          - service: input_boolean.turn_on
            target:
              entity_id: input_boolean.sala_snapshot_ready

          # 4.b) Atenuar RELATIVO (-50% por luz encendida) con PISO (10%)
          - variables:
              luces_area_on_now: >-
                {{ expand(luces_area)
                   | selectattr('state','eq','on')
                   | map(attribute='entity_id') | list }}
          - if:
              - condition: template
                value_template: "{{ luces_area_on_now | length > 0 }}"
            then:
              - repeat:
                  for_each: "{{ luces_area_on_now }}"
                  sequence:
                    - service: light.turn_on
                      data:
                        entity_id: "{{ repeat.item }}"
                        brightness: >-
                          {% set b = state_attr(repeat.item, 'brightness')|int(255) %}
                          {% set new = (b * 0.5) | round(0) %}
                          {% set floor = piso_brillo | int %}
                          {{ [new, floor] | max }}
                        transition: 2

          # 4.c) Iniciar timer de PREAVISO (independiente, visible en UI)
          - service: timer.start
            target: { entity_id: timer.preaviso_sala }
            data:
              duration: "{{ preaviso_seconds }}"

          # 4.d) Esperar movimiento o fin de preaviso
          - wait_for_trigger:
              - platform: state
                entity_id: binary_sensor.motion_sala
                to: 'on'
              - platform: event
                event_type: timer.finished
                event_data:
                  entity_id: timer.preaviso_sala
            timeout: "{{ apagado_timeout }}"   # salvaguarda
            continue_on_timeout: true

          - choose:
              # 4.e) Movimiento durante preaviso -> restaurar y cancelar timers
              - conditions: >-
                  {{ wait.trigger and
                     (wait.trigger.platform == 'state' and wait.trigger.to_state and
                      wait.trigger.to_state.state == 'on') }}
                sequence:
                  - condition: state
                    entity_id: input_boolean.mantener_luces
                    state: 'off'
                  - service: timer.cancel
                    target:
                      entity_id:
                        - timer.preaviso_sala
                        - timer.apagado_sala
                  - service: scene.turn_on
                    target:
                      entity_id: "scene.{{ snapshot_id }}"
                    data:
                      transition: 2
                  - service: input_boolean.turn_off
                    target:
                      entity_id: input_boolean.sala_snapshot_ready
                  - stop: "Movimiento durante PREAVISO -> restaurado snapshot y cancelado todo."

            # 4.f) Sin movimiento: apagar luces al finalizar preaviso
            default:
              - condition: state
                entity_id: input_boolean.mantener_luces
                state: 'off'
              - service: light.turn_off
                data:
                  entity_id: "{{ luces_area | join(', ') }}"
                  transition: 2
              # Dejamos sala_snapshot_ready = ON para poder restaurar al volver con movimiento
              # (Será limpiado por TTL más abajo si corresponde)

  # B) Restaurar/fallback ante movimiento en cualquier momento
  - id: luces_sala_movimiento_restore_on_motion
    alias: Luces - Sala de estar - restaurar/fallback en movimiento (v6)
    mode: single

    trigger:
      - platform: state
        entity_id: binary_sensor.motion_sala
        to: 'on'

    condition:
      - condition: state
        entity_id: input_boolean.mantener_luces
        state: 'off'

    action:
      - variables:
          snapshot_id: "snapshot_sala_de_estar"
          area_name: "sala de estar"
          luces_area: >-
            {{ expand(area_entities(area_name))
               | selectattr('entity_id','search','^light\\.')
               | map(attribute='entity_id') | list }}

      - choose:
          # Si hay snapshot listo -> restaurar y cancelar timers
          - conditions:
              - condition: state
                entity_id: input_boolean.sala_snapshot_ready
                state: 'on'
            sequence:
              - service: timer.cancel
                target:
                  entity_id:
                    - timer.preaviso_sala
                    - timer.apagado_sala
              - service: scene.turn_on
                target:
                  entity_id: "scene.{{ snapshot_id }}"
                data:
                  transition: 2
              - service: input_boolean.turn_off
                target:
                  entity_id: input_boolean.sala_snapshot_ready

        # Si NO hay snapshot -> Fallback: enciende el área a 60%
        default:
          - service: light.turn_on
            data:
              entity_id: "{{ luces_area | join(', ') }}"
              brightness_pct: 60
              transition: 1

  # C) TTL del snapshot: limpia el flag pasado X minutos
  - id: sala_snapshot_auto_clear
    alias: Sala - limpiar flag snapshot tras TTL (v6)
    mode: restart
    trigger:
      - platform: state
        entity_id: input_boolean.sala_snapshot_ready
        to: 'on'
    action:
      - delay:
          minutes: "{{ states('input_number.sala_snapshot_ttl_min')|int(30) }}"
      # Si aún bypass está off y no hay timers activos, limpia el flag
      - condition: state
        entity_id: input_boolean.mantener_luces
        state: 'off'
      - condition: state
        entity_id: timer.apagado_sala
        state: 'idle'
      - condition: state
        entity_id: timer.preaviso_sala
        state: 'idle'
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.sala_snapshot_ready
