# =========================
# Package: motion_kilo (leaf-lights)
# Auto lights Sala de Estar con escena, reducción, arribo por franja, scripts por franja
# y uso consistente de "luces hoja" (expande grupos a integrantes)
# =========================

input_number:
  # --- Timeouts de apagado suave por franja ---
  sala_de_estar_timeout_manana:
    name: Timeout - Mañana
    min: 1
    max: 60
    step: 1
    unit_of_measurement: minutes
    initial: 10
  sala_de_estar_timeout_mediodia:
    name: Timeout - Mediodia
    min: 1
    max: 60
    step: 1
    unit_of_measurement: minutes
    initial: 15
  sala_de_estar_timeout_tarde:
    name: Timeout - Tarde
    min: 1
    max: 60
    step: 1
    unit_of_measurement: minutes
    initial: 20
  sala_de_estar_timeout_noche:
    name: Timeout - Noche
    min: 1
    max: 60
    step: 1
    unit_of_measurement: minutes
    initial: 30
  sala_de_estar_timeout_madrugada:
    name: Timeout - Madrugada
    min: 1
    max: 60
    step: 1
    unit_of_measurement: minutes
    initial: 5

  # --- Brillo por franja ---
  sala_de_estar_brightness_manana:
    name: Brightness - Mañana
    min: 0
    max: 255
    step: 1
    initial: 200
  sala_de_estar_brightness_mediodia:
    name: Brightness - Mediodia
    min: 0
    max: 255
    step: 1
    initial: 255
  sala_de_estar_brightness_tarde:
    name: Brightness - Tarde
    min: 0
    max: 255
    step: 1
    initial: 220
  sala_de_estar_brightness_noche:
    name: Brightness - Noche
    min: 0
    max: 255
    step: 1
    initial: 150
  sala_de_estar_brightness_madrugada:
    name: Brightness - Madrugada
    min: 0
    max: 255
    step: 1
    initial: 100

  sala_de_estar_reduction_percentage:
    name: Reduction Percentage
    min: 0
    max: 100
    step: 1
    unit_of_measurement: "%"
    initial: 50

  # --- ARRIBO por franja (ventana máx. sin movimiento que conserva la escena) ---
  sala_de_estar_arribo_manana:
    name: Arribo - Mañana
    min: 1
    max: 120
    step: 1
    unit_of_measurement: minutes
    initial: 15
  sala_de_estar_arribo_mediodia:
    name: Arribo - Mediodia
    min: 1
    max: 120
    step: 1
    unit_of_measurement: minutes
    initial: 15
  sala_de_estar_arribo_tarde:
    name: Arribo - Tarde
    min: 1
    max: 120
    step: 1
    unit_of_measurement: minutes
    initial: 20
  sala_de_estar_arribo_noche:
    name: Arribo - Noche
    min: 1
    max: 120
    step: 1
    unit_of_measurement: minutes
    initial: 30
  sala_de_estar_arribo_madrugada:
    name: Arribo - Madrugada
    min: 1
    max: 120
    step: 1
    unit_of_measurement: minutes
    initial: 10

input_text:
  # --- Script global (fallback) ---
  sala_de_estar_effect_script_name:
    name: Effect Script - Global
    initial: motion_kilo_default_effect

  # --- Script por franja (opcional). Vacío => usa Global ---
  sala_de_estar_effect_script_manana:
    name: Effect Script - Mañana
    initial: ""
  sala_de_estar_effect_script_mediodia:
    name: Effect Script - Mediodia
    initial: ""
  sala_de_estar_effect_script_tarde:
    name: Effect Script - Tarde
    initial: ""
  sala_de_estar_effect_script_noche:
    name: Effect Script - Noche
    initial: ""
  sala_de_estar_effect_script_madrugada:
    name: Effect Script - Madrugada
    initial: ""

input_boolean:
  sala_de_estar_debug_mode:
    name: Debug Mode
    initial: off

# -------------------------
# SCRIPTS
# -------------------------
script:
  sala_de_estar_save_scene:
    alias: SALA - Guardar escena snapshot (leaf)
    mode: parallel
    sequence:
      - service: system_log.write
        data: { message: "[motion_kilo] Saving scene (leaf) for sala_de_estar", level: info }
      - event: motion_kilo_debug
        event_data: { title: "Scene Saved", message: "Snapshot leaf en sala_de_estar." }
      - variables:
          leaf_lights: >
            {% set ns = namespace(leaf=[]) %}
            {% for l in area_entities('sala_de_estar') | select('match','light\\..*') %}
              {% set m = state_attr(l,'entity_id') %}
              {% set ns.leaf = ns.leaf + (m if m else [l]) %}
            {% endfor %}
            {{ ns.leaf | unique | list }}
      - service: scene.create
        data:
          scene_id: sala_de_estar_auto_snapshot
          snapshot_entities: "{{ leaf_lights }}"

  sala_de_estar_reduce_brightness:
    alias: SALA - Reducir brillo (solo encendidas, leaf)
    mode: parallel
    sequence:
      - service: system_log.write
        data: { message: "[motion_kilo] Reducing brightness (leaf) in sala_de_estar", level: info }
      - variables:
          pd: "{{ states('sensor.parte_del_dia') }}"
          map_bri: >
            {{ {
              'manana':'input_number.sala_de_estar_brightness_manana',
              'mediodia':'input_number.sala_de_estar_brightness_mediodia',
              'tarde':'input_number.sala_de_estar_brightness_tarde',
              'noche':'input_number.sala_de_estar_brightness_noche',
              'madrugada':'input_number.sala_de_estar_brightness_madrugada'
            } }}
          base: "{{ states(map_bri[pd])|int if pd in map_bri else 200 }}"
          red: "{{ states('input_number.sala_de_estar_reduction_percentage')|int }}"
          target_bri: "{{ (base * (100 - red) / 100) | int }}"
          leaf_lights: >
            {% set ns = namespace(leaf=[]) %}
            {% for l in area_entities('sala_de_estar') | select('match','light\\..*') %}
              {% set m = state_attr(l,'entity_id') %}
              {% set ns.leaf = ns.leaf + (m if m else [l]) %}
            {% endfor %}
            {{ ns.leaf | unique | list }}
          on_lights: >
            {{ expand(leaf_lights) | selectattr('state','equalto','on') | map(attribute='entity_id') | list }}
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ on_lights | length > 0 }}"
            sequence:
              - event: motion_kilo_debug
                event_data:
                  title: "Brightness Reduced"
                  message: "Luces afectadas: {{ on_lights | count }}. Nuevo brillo: {{ target_bri }}."
              - service: light.turn_on
                target: { entity_id: "{{ on_lights }}" }
                data: { brightness: "{{ target_bri }}", transition: 1 }

  sala_de_estar_turn_off_lights:
    alias: SALA - Apagar luces (leaf)
    mode: parallel
    sequence:
      - service: system_log.write
        data: { message: "[motion_kilo] Turning off lights (leaf) in sala_de_estar", level: info }
      - event: motion_kilo_debug
        event_data: { title: "Lights Off", message: "Apagado por timeout en sala_de_estar." }
      - variables:
          leaf_lights: >
            {% set ns = namespace(leaf=[]) %}
            {% for l in area_entities('sala_de_estar') | select('match','light\\..*') %}
              {% set m = state_attr(l,'entity_id') %}
              {% set ns.leaf = ns.leaf + (m if m else [l]) %}
            {% endfor %}
            {{ ns.leaf | unique | list }}
      - service: light.turn_off
        target: { entity_id: "{{ leaf_lights }}" }

  sala_de_estar_turn_on_lights:
    alias: SALA - Encender (escena/efecto por franja, leaf)
    mode: parallel
    fields:
      use_scene:
        name: Use Scene
        description: Si existe snapshot reciente, restaurarlo
        default: true
        selector: { boolean: {} }
    sequence:
      - variables:
          pd: "{{ states('sensor.parte_del_dia') }}"
          map_bri: >
            {{ {
              'manana':'input_number.sala_de_estar_brightness_manana',
              'mediodia':'input_number.sala_de_estar_brightness_mediodia',
              'tarde':'input_number.sala_de_estar_brightness_tarde',
              'noche':'input_number.sala_de_estar_brightness_noche',
              'madrugada':'input_number.sala_de_estar_brightness_madrugada'
            } }}
          map_fx: >
            {{ {
              'manana':'input_text.sala_de_estar_effect_script_manana',
              'mediodia':'input_text.sala_de_estar_effect_script_mediodia',
              'tarde':'input_text.sala_de_estar_effect_script_tarde',
              'noche':'input_text.sala_de_estar_effect_script_noche',
              'madrugada':'input_text.sala_de_estar_effect_script_madrugada'
            } }}
          brightness: "{{ states(map_bri[pd])|int if pd in map_bri else 200 }}"
          per_slot_fx: "{{ states(map_fx[pd]) if pd in map_fx else '' }}"
          global_fx: "{{ states('input_text.sala_de_estar_effect_script_name') }}"
          effect_service: >
            {% set pick = (per_slot_fx | trim) if (per_slot_fx | trim) != '' else (global_fx | trim) %}
            {{ pick }}
          leaf_lights: >
            {% set ns = namespace(leaf=[]) %}
            {% for l in area_entities('sala_de_estar') | select('match','light\\..*') %}
              {% set m = state_attr(l,'entity_id') %}
              {% set ns.leaf = ns.leaf + (m if m else [l]) %}
            {% endfor %}
            {{ ns.leaf | unique | list }}
      - service: system_log.write
        data: { message: "[motion_kilo] Turn ON (leaf). use_scene={{ use_scene }}", level: info }

      - choose:
          # 1) Restaurar escena si existe y fue tomada antes
          - conditions:
              - condition: template
                value_template: >
                  {{ use_scene and
                     (state_attr('scene.sala_de_estar_auto_snapshot','entity_id') | default([]) | count > 0) }}
            sequence:
              - event: motion_kilo_debug
                event_data: { title: "Lights On - Scene", message: "Restaurando snapshot." }
              - service: scene.turn_on
                target: { entity_id: scene.sala_de_estar_auto_snapshot }

          # 2) Efecto por franja (si existe servicio), sino global, sino fallback
          - conditions:
              - condition: template
                value_template: >
                  {{ (not use_scene) and (effect_service != '') and has_service('script', effect_service) }}
            sequence:
              - event: motion_kilo_debug
                event_data:
                  title: "Lights On - Effect"
                  message: "Usando script {{ effect_service }}."
              - service: >
                  {{ 'script.' + effect_service }}

        # 3) Fallback: encender por brillo (leaf)
        default:
          - event: motion_kilo_debug
            event_data:
              title: "Lights On - Fallback"
              message: "Encendido simple (leaf) por brillo={{ brightness }}."
          - service: light.turn_on
            target: { entity_id: "{{ leaf_lights }}" }
            data: { brightness: "{{ brightness }}", transition: 1 }

  # --------- Script de efecto por defecto ----------
  motion_kilo_default_effect:
    alias: Motion Kilo - Default Turn On Effect (leaf)
    mode: parallel
    sequence:
      - variables:
          pd: "{{ states('sensor.parte_del_dia') }}"
          map_bri: >
            {{ {
              'manana':'input_number.sala_de_estar_brightness_manana',
              'mediodia':'input_number.sala_de_estar_brightness_mediodia',
              'tarde':'input_number.sala_de_estar_brightness_tarde',
              'noche':'input_number.sala_de_estar_brightness_noche',
              'madrugada':'input_number.sala_de_estar_brightness_madrugada'
            } }}
          brightness: "{{ states(map_bri[pd])|int if pd in map_bri else 200 }}"
          leaf_lights: >
            {% set ns = namespace(leaf=[]) %}
            {% for l in area_entities('sala_de_estar') | select('match','light\\..*') %}
              {% set m = state_attr(l,'entity_id') %}
              {% set ns.leaf = ns.leaf + (m if m else [l]) %}
            {% endfor %}
            {{ ns.leaf | unique | list }}
      - event: motion_kilo_debug
        event_data:
          title: "Default Effect"
          message: "Encendiendo (leaf) {{ leaf_lights | count }} luces con brillo={{ brightness }} (transición 1s)."
      - service: light.turn_on
        target: { entity_id: "{{ leaf_lights }}" }
        data: { brightness: "{{ brightness }}", transition: 1 }

# -------------------------
# AUTOMATIONS
# -------------------------
automation:
  - alias: motion_kilo - Turn On (motion)
    id: motion_kilo_turn_on
    mode: single
    variables:
      area_id: sala_de_estar
      motion_sensor: binary_sensor.motion_sala
      day_part_sensor: sensor.parte_del_dia
      timer_name: timer.sala_de_estar_auto_timer
      timer_max_name: timer.sala_de_estar_max_timer
      current_arribo: >
        {% set pd = states(day_part_sensor) %}
        {% set map = {
          'manana':'input_number.sala_de_estar_arribo_manana',
          'mediodia':'input_number.sala_de_estar_arribo_mediodia',
          'tarde':'input_number.sala_de_estar_arribo_tarde',
          'noche':'input_number.sala_de_estar_arribo_noche',
          'madrugada':'input_number.sala_de_estar_arribo_madrugada'
        } %}
        {{ states(map[pd])|int if pd in map else 15 }}
    trigger:
      - platform: state
        entity_id: binary_sensor.motion_sala
        to: "on"
        id: motion_on
    action:
      - event: motion_kilo_debug
        event_data:
          title: "Motion Detected"
          message: "Movimiento en {{ area_id }}. Cancelando timers."
      - service: timer.cancel
        target: { entity_id: "{{ timer_name }}" }
      - service: timer.cancel
        target: { entity_id: "{{ timer_max_name }}" }

      # Usar escena si el "max timer" estaba activo (venimos de pausa corta)
      - variables:
          use_scene: "{{ states(timer_max_name) != 'idle' }}"

      - service: timer.start
        data:
          entity_id: "{{ timer_max_name }}"
          duration: "{{ (current_arribo | int) * 60 }}"
      - service: script.sala_de_estar_turn_on_lights
        data: { use_scene: "{{ use_scene }}" }

  - alias: motion_kilo - Timeout & Reduction
    id: motion_kilo_timeout_and_reduction
    mode: restart
    variables:
      area_id: sala_de_estar
      day_part_sensor: sensor.parte_del_dia
      timer_name: timer.sala_de_estar_auto_timer
      timer_max_name: timer.sala_de_estar_max_timer
      current_timeout: >
        {% set pd = states(day_part_sensor) %}
        {% set map = {
          'manana':'input_number.sala_de_estar_timeout_manana',
          'mediodia':'input_number.sala_de_estar_timeout_mediodia',
          'tarde':'input_number.sala_de_estar_timeout_tarde',
          'noche':'input_number.sala_de_estar_timeout_noche',
          'madrugada':'input_number.sala_de_estar_timeout_madrugada'
        } %}
        {{ states(map[pd])|int if pd in map else 10 }}
      current_arribo: >
        {% set pd = states(day_part_sensor) %}
        {% set map = {
          'manana':'input_number.sala_de_estar_arribo_manana',
          'mediodia':'input_number.sala_de_estar_arribo_mediodia',
          'tarde':'input_number.sala_de_estar_arribo_tarde',
          'noche':'input_number.sala_de_estar_arribo_noche',
          'madrugada':'input_number.sala_de_estar_arribo_madrugada'
        } %}
        {{ states(map[pd])|int if pd in map else 15 }}
    trigger:
      - platform: state
        entity_id: binary_sensor.motion_sala
        to: "off"
        id: motion_off
      - platform: event
        event_type: timer.finished
        event_data: { entity_id: timer.sala_de_estar_auto_timer }
        id: timer_finished
    action:
      - choose:
          - conditions: [ { condition: trigger, id: motion_off } ]
            sequence:
              - event: motion_kilo_debug
                event_data:
                  title: "Motion Cleared"
                  message: "Sin movimiento. Esperando {{ current_timeout }} min antes de reducir."
              - delay: "{{ max((current_timeout | int - 2), 0) * 60 }}"

              # Si volvió el movimiento, abortar reducción
              - condition: state
                entity_id: binary_sensor.motion_sala
                state: "off"

              - service: script.sala_de_estar_save_scene
              - service: script.sala_de_estar_reduce_brightness
              - service: timer.start
                data: { entity_id: "{{ timer_name }}", duration: 120 }
              - service: timer.start
                data:
                  entity_id: "{{ timer_max_name }}"
                  duration: "{{ (current_arribo | int) * 60 }}"

          - conditions: [ { condition: trigger, id: timer_finished } ]
            sequence:
              - event: motion_kilo_debug
                event_data:
                  title: "Lights Turning Off"
                  message: "Se cumplió el auto_timer. Apagando."
              - service: script.sala_de_estar_turn_off_lights

  # -------------------------
  # DEBUG Relay (notis/logs solo si el boolean está ON)
  # -------------------------
  - alias: motion_kilo - Debug Relay
    id: motion_kilo_debug_relay
    mode: parallel
    trigger: [ { platform: event, event_type: motion_kilo_debug } ]
    condition:
      - condition: state
        entity_id: input_boolean.sala_de_estar_debug_mode
        state: "on"
    action:
      - service: persistent_notification.create
        data:
          title: "{{ trigger.event.data.title | default('motion_kilo') }}"
          message: "{{ trigger.event.data.message | default('') }}"
      - service: system_log.write
        data:
          message: >
            [motion_kilo][DEBUG] {{ trigger.event.data.title | default('') }} - {{ trigger.event.data.message | default('') }}
          level: info

# -------------------------
# SCENE (vacía; se llena con scene.create)
# -------------------------
scene:
  - name: Sala de Estar Auto Snapshot
    id: sala_de_estar_auto_snapshot
    entities: {}

# -------------------------
# TIMERS (duración fija; siempre se sobreescriben al iniciar)
# -------------------------
timer:
  sala_de_estar_auto_timer:
    name: Sala de Estar Auto Timer
    duration: "00:02:00"
  sala_de_estar_max_timer:
    name: Sala de Estar Max Timer
    duration: "00:15:00"
