# ===========================================
# Package: yendo_a_dormir
# Llama a script externo: script.gradual_brightness_change
# ===========================================

###############################################################
# HELPERS
###############################################################
input_boolean:
   yendo_a_dormir:
     name: Yendo a dormir
     initial: off
   horario_de_dormir:
     name: Horario de dormir
     initial: off

input_number:
  yendo_dormir_target_pct:
    name: Dormir - Target %
    min: 0
    max: 100
    step: 1
    unit_of_measurement: "%"
    initial: 10
  yendo_dormir_fade_sec:
    name: Dormir - Fade (s)
    min: 5
    max: 600
    step: 5
    unit_of_measurement: s
    initial: 60
  yendo_dormir_wait_after_sec:
    name: Dormir - Espera luego del fade (s)
    min: 0
    max: 900
    step: 10
    unit_of_measurement: s
    initial: 120

###############################################################
# TIMER PROPIO (para countdown en UI)
###############################################################
timer:
  yendo_dormir_countdown:
    name: Countdown dormir
    duration: "00:03:00"   # se sobreescribe dinámicamente
    restore: true

###############################################################
# SCRIPTS (utilitarios locales)
###############################################################
script:

  yendo_dormir_save_scene:
    alias: Dormir - Guardar escena (leaf sala_de_estar)
    mode: parallel
    sequence:
      - variables:
          leaf_lights: >
            {% set ns = namespace(leaf=[]) %}
            {% for l in area_entities('sala_de_estar') | select('match','light\\..*') %}
              {% set m = state_attr(l,'entity_id') %}
              {% set ns.leaf = ns.leaf + (m if m else [l]) %}
            {% endfor %}
            {{ ns.leaf | unique | list }}
      - service: scene.create
        data:
          scene_id: yendo_dormir_snapshot
          snapshot_entities: "{{ leaf_lights }}"

  yendo_dormir_turn_off_area:
    alias: Dormir - Apagar sala (leaf)
    mode: parallel
    sequence:
      - variables:
          leaf_lights: >
            {% set ns = namespace(leaf=[]) %}
            {% for l in area_entities('sala_de_estar') | select('match','light\\..*') %}
              {% set m = state_attr(l,'entity_id') %}
              {% set ns.leaf = ns.leaf + (m if m else [l]) %}
            {% endfor %}
            {{ ns.leaf | unique | list }}
      - service: light.turn_off
        target: { entity_id: "{{ leaf_lights }}" }

  yendo_a_dormir_pre_off:
    alias: "Dormir - Pre-off: apagar luces una por una, dejar 1 y activar escena madrugada"
    mode: single
    sequence:
      - variables:
          leaf_lights: >
            {% set ns = namespace(leaf=[]) %}
            {% for l in area_entities('sala_de_estar') | select('match','light\\..*') %}
              {% set m = state_attr(l,'entity_id') %}
              {% set ns.leaf = ns.leaf + (m if m else [l]) %}
            {% endfor %}
            {{ ns.leaf | unique | list }}
          on_lights: >
            {{ expand(leaf_lights) | selectattr('state','equalto','on') | map(attribute='entity_id') | list }}
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ on_lights | length > 1 }}"
            sequence:
              - repeat:
                  count: "{{ on_lights | length - 1 }}"
                  sequence:
                    - service: light.turn_off
                      target: { entity_id: "{{ on_lights[repeat.index] }}" }
                    - delay: 4
        default: []
      - service: scene.turn_on
        target: { entity_id: scene.luces_madrugada }

###############################################################
# AUTOMATIONS
###############################################################
automation:

  # ON → Inicia rutina dormir:
  # BYPASS ON, cancelar sala_auto, snapshot, fade externo, iniciar countdown (fade+espera)
  - alias: Dormir - ON start
    id: yendo_dormir_on_start
    mode: restart
    trigger:
      - platform: state
        entity_id: input_boolean.yendo_a_dormir
        to: "on"
    variables:
      fade_s: "{{ states('input_number.yendo_dormir_fade_sec') | int(60) }}"
      wait_s: "{{ states('input_number.yendo_dormir_wait_after_sec') | int(120) }}"
      total_s: "{{ fade_s + wait_s }}"
      pct: "{{ states('input_number.yendo_dormir_target_pct') | int(10) }}"
    action:
      # Aislar sala_auto
      - service: input_boolean.turn_on
        target: { entity_id: input_boolean.sala_auto_bypass }

      # Cancelar timers de sala_auto
      - service: timer.cancel
        target:
          entity_id:
            - timer.sala_auto_idle_timeout
            - timer.sala_auto_dim_notice
            - timer.sala_auto_restore_window

      # Cancelar timer propio (si venía corriendo)
      - service: timer.cancel
        target: { entity_id: timer.yendo_dormir_countdown }

      # Guardar escena (posible restore si cancelás)
      - service: script.turn_on
        target: { entity_id: script.yendo_dormir_save_scene }

      # Iniciar countdown total (fade + espera)
      - service: timer.start
        target: { entity_id: timer.yendo_dormir_countdown }
        data:
          duration: "{{ total_s }}"

      # Fade gradual con script externo (1 paso/seg, paralelo)
      - service: script.gradual_brightness_change
        data:
          target:
            area_id: sala_de_estar
          target_brightness: "{{ pct }}"
          transition_time: "{{ fade_s }}"
          steps: "{{ fade_s }}"
          queue_mode: parallel
      - delay: "{{ fade_s }}"
      - service: script.turn_on
        target: { entity_id: script.yendo_a_dormir_pre_off }



  # FIN del countdown → apagar, forzar WAITING_ARRIVAL, delay 2s, bypass OFF, refuerzo WAITING_ARRIVAL, toggle OFF
  - alias: Dormir - FIN
    id: yendo_dormir_finish
    mode: single
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.yendo_dormir_countdown
    action:
      # Apagar todo
      - service: script.turn_on
        target: { entity_id: script.yendo_dormir_turn_off_area }

      # Forzar primero WAITING_ARRIVAL
      - service: input_select.select_option
        target: { entity_id: input_select.sala_auto_state }
        data: { option: WAITING_ARRIVAL }

      # Delay de seguridad (anti 'pisada' a ACTIVE)
      - delay: "00:00:02"

      # Apagar bypass
      - service: input_boolean.turn_off
        target: { entity_id: input_boolean.sala_auto_bypass }

      # Refuerzo final de estado
      - service: input_select.select_option
        target: { entity_id: input_select.sala_auto_state }
        data: { option: WAITING_ARRIVAL }

  # Horario dormir - ON at 22:00
  - alias: Horario dormir - ON at 22:00
    id: horario_dormir_on
    mode: single
    trigger:
      - platform: time
        at: "22:00:00"
    action:
      - service: input_boolean.turn_on
        target: { entity_id: input_boolean.horario_de_dormir }

  # Horario dormir - OFF at 02:00
  - alias: Horario dormir - OFF at 02:00
    id: horario_dormir_off
    mode: single
    trigger:
      - platform: time
        at: "02:00:00"
    action:
      - service: input_boolean.turn_off
        target: { entity_id: input_boolean.horario_de_dormir }

      # Apagar el toggle maestro
      - service: input_boolean.turn_off
        target: { entity_id: input_boolean.yendo_a_dormir }

  # Horario dormir - Sync al reiniciar HA
  - alias: Horario dormir - Sync al reiniciar HA
    id: horario_dormir_sync_on_start
    mode: single
    trigger:
      - platform: homeassistant
        event: start
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ now().hour >= 22 or now().hour < 2 }}"
            sequence:
              - service: input_boolean.turn_on
                target: { entity_id: input_boolean.horario_de_dormir }
        default:
          - service: input_boolean.turn_off
            target: { entity_id: input_boolean.horario_de_dormir }
  # OFF manual antes de terminar → cancelar y restaurar escena, luego misma salida con delay 2s
  - alias: Dormir - OFF cancel + restore
    id: yendo_dormir_off_cancel
    mode: single
    trigger:
      - platform: state
        entity_id: input_boolean.yendo_a_dormir
        to: "off"
    condition:
      - condition: state
        entity_id: timer.yendo_dormir_countdown
        state: "active"
    action:
      # Cancelar countdown
      - service: timer.cancel
        target: { entity_id: timer.yendo_dormir_countdown }

      # Intentar detener el script externo (best-effort)
      - service: script.turn_off
        target: { entity_id: script.gradual_brightness_change }

      # Restaurar snapshot
      - service: scene.turn_on
        target: { entity_id: scene.yendo_dormir_snapshot }

      # Forzar primero WAITING_ARRIVAL
      - service: input_select.select_option
        target: { entity_id: input_select.sala_auto_state }
        data: { option: WAITING_ARRIVAL }

      # Delay de seguridad
      - delay: "00:00:02"

      # Apagar bypass
      - service: input_boolean.turn_off
        target: { entity_id: input_boolean.sala_auto_bypass }

      # Refuerzo final de estado
      - service: input_select.select_option
        target: { entity_id: input_select.sala_auto_state }
        data: { option: WAITING_ARRIVAL }
